{"ast":null,"code":"var _jsxFileName = \"D:\\\\ToDo Web\\\\task-mate\\\\client\\\\src\\\\context\\\\TaskContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskContext = /*#__PURE__*/createContext();\nexport const TaskProvider = ({\n  children\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch all tasks\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        setLoading(true);\n        const res = await axios.get('/api/tasks');\n        setTasks(res.data);\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch tasks');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTasks();\n  }, []);\n\n  // Add a new task\n  const addTask = async task => {\n    try {\n      const res = await axios.post('/api/tasks', task);\n      setTasks([...tasks, res.data]);\n      return res.data;\n    } catch (err) {\n      setError('Failed to add task');\n      console.error(err);\n      throw err;\n    }\n  };\n\n  // Edit an existing task\n  const editTask = async (id, updatedTask) => {\n    try {\n      const res = await axios.put(`/api/tasks/${id}`, updatedTask);\n      setTasks(tasks.map(task => task._id === id ? res.data : task));\n      return res.data;\n    } catch (err) {\n      setError('Failed to update task');\n      console.error(err);\n      throw err;\n    }\n  };\n\n  // Delete a task\n  const deleteTask = async id => {\n    try {\n      await axios.delete(`/api/tasks/${id}`);\n      setTasks(tasks.filter(task => task._id !== id));\n    } catch (err) {\n      setError('Failed to delete task');\n      console.error(err);\n      throw err;\n    }\n  };\n\n  // Mark task as completed\n  const markAsCompleted = async id => {\n    try {\n      const res = await axios.patch(`/api/tasks/${id}/complete`);\n      setTasks(tasks.map(task => task._id === id ? res.data : task));\n      return res.data;\n    } catch (err) {\n      setError('Failed to update task status');\n      console.error(err);\n      throw err;\n    }\n  };\n\n  // Mark task as incomplete\n  const markAsIncomplete = async id => {\n    try {\n      const res = await axios.patch(`/api/tasks/${id}/incomplete`);\n      setTasks(tasks.map(task => task._id === id ? res.data : task));\n      return res.data;\n    } catch (err) {\n      setError('Failed to update task status');\n      console.error(err);\n      throw err;\n    }\n  };\n\n  // Search tasks\n  const searchTasks = async query => {\n    try {\n      setLoading(true);\n      const res = await axios.get(`/api/tasks/search?query=${query}`);\n      setTasks(res.data);\n      setError(null);\n    } catch (err) {\n      setError('Search failed');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Filter tasks by category\n  const filterTasksByCategory = async category => {\n    try {\n      setLoading(true);\n      const res = await axios.get(`/api/tasks/category/${category}`);\n      setTasks(res.data);\n      setError(null);\n    } catch (err) {\n      setError('Filter failed');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      loading,\n      error,\n      addTask,\n      editTask,\n      deleteTask,\n      markAsCompleted,\n      markAsIncomplete,\n      searchTasks,\n      filterTasksByCategory\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskProvider, \"qwRs5Xd4E7WtXCZK9zh6nomhOw4=\");\n_c = TaskProvider;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","TaskContext","TaskProvider","children","_s","tasks","setTasks","loading","setLoading","error","setError","fetchTasks","res","get","data","err","console","addTask","task","post","editTask","id","updatedTask","put","map","_id","deleteTask","delete","filter","markAsCompleted","patch","markAsIncomplete","searchTasks","query","filterTasksByCategory","category","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/ToDo Web/task-mate/client/src/context/TaskContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const TaskContext = createContext();\n\nexport const TaskProvider = ({ children }) => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch all tasks\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        setLoading(true);\n        const res = await axios.get('/api/tasks');\n        setTasks(res.data);\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch tasks');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchTasks();\n  }, []);\n\n  // Add a new task\n  const addTask = async (task) => {\n    try {\n      const res = await axios.post('/api/tasks', task);\n      setTasks([...tasks, res.data]);\n      return res.data;\n    } catch (err) {\n      setError('Failed to add task');\n      console.error(err);\n      throw err;\n    }\n  };\n\n  // Edit an existing task\n  const editTask = async (id, updatedTask) => {\n    try {\n      const res = await axios.put(`/api/tasks/${id}`, updatedTask);\n      setTasks(tasks.map(task => task._id === id ? res.data : task));\n      return res.data;\n    } catch (err) {\n      setError('Failed to update task');\n      console.error(err);\n      throw err;\n    }\n  };\n\n  // Delete a task\n  const deleteTask = async (id) => {\n    try {\n      await axios.delete(`/api/tasks/${id}`);\n      setTasks(tasks.filter(task => task._id !== id));\n    } catch (err) {\n      setError('Failed to delete task');\n      console.error(err);\n      throw err;\n    }\n  };\n\n  // Mark task as completed\n  const markAsCompleted = async (id) => {\n    try {\n      const res = await axios.patch(`/api/tasks/${id}/complete`);\n      setTasks(tasks.map(task => task._id === id ? res.data : task));\n      return res.data;\n    } catch (err) {\n      setError('Failed to update task status');\n      console.error(err);\n      throw err;\n    }\n  };\n\n  // Mark task as incomplete\n  const markAsIncomplete = async (id) => {\n    try {\n      const res = await axios.patch(`/api/tasks/${id}/incomplete`);\n      setTasks(tasks.map(task => task._id === id ? res.data : task));\n      return res.data;\n    } catch (err) {\n      setError('Failed to update task status');\n      console.error(err);\n      throw err;\n    }\n  };\n\n  // Search tasks\n  const searchTasks = async (query) => {\n    try {\n      setLoading(true);\n      const res = await axios.get(`/api/tasks/search?query=${query}`);\n      setTasks(res.data);\n      setError(null);\n    } catch (err) {\n      setError('Search failed');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Filter tasks by category\n  const filterTasksByCategory = async (category) => {\n    try {\n      setLoading(true);\n      const res = await axios.get(`/api/tasks/category/${category}`);\n      setTasks(res.data);\n      setError(null);\n    } catch (err) {\n      setError('Filter failed');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <TaskContext.Provider value={{\n      tasks,\n      loading,\n      error,\n      addTask,\n      editTask,\n      deleteTask,\n      markAsCompleted,\n      markAsIncomplete,\n      searchTasks,\n      filterTasksByCategory\n    }}>\n      {children}\n    </TaskContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}